#!/bin/bash
echo "===> Gathering information..."
echo "> Machine model name"
d1="$(sudo dmidecode -s system-version)"
d2="$(sudo dmidecode -s system-manufacturer)"
d3="$(sudo dmidecode -s system-family)"
d4="$(sudo dmidecode -s system-product-name)"
model1="$d1"
model2="$d2 $d3"
model3="$d2 $d4"
echo "< CPU information"
cpu="$(awk -F '\\s*: | @' \
	'/model name|Hardware|Processor|^cpu model|chip type|^cpu type/ {
	cpu=$2; if ($1 == "Hardware") exit } END { print cpu }' "/proc/cpuinfo")"
echo "< RAM information"
IFS=":" read -r a b < /proc/meminfo
ram="${b/kB}"
ram="$((ram/1024)) MB"
echo "< Storage information"
rootdev="$(rootdev -d)"
storage_prepare="$(< /sys/block/${rootdev##*/}/queue/rotational)"
	case "$storage_prepare" in
		1) storage_type="(HDD)" ;;
		0) storage_type="(SSD)" ;;
		*) storage_type="" ;;
	esac
storage="$(sudo lsblk -b -n -d -o SIZE $rootdev)"
storage="$((storage/1024/1024/1024)) GB"
if [[ "$rootdev" =~ .*"loop".* ]]; then
	dualboot=1
	if [ -n "$storage_type" ]; then
		storage_model="(on ${storage_type//[()]/})"
		storage="Image file ${storage_model}: $storage"
	else
		storage="Image file: $storage"
	fi
else
	dualboot=0
	storage_model="$(sudo lsblk -b -n -d -o MODEL $rootdev)"
	if [ -z "$storage_model" ]; then
		storage_model="Unknown drive ${storage_type} $storage"
	fi
	storage="$storage_model $storage"
fi
echo "< Brunch version"
brunch="$(< /etc/brunch_version)"
echo "< Recovery information"
lsb_file="$(< /etc/lsb-release)"
board="$(grep -o "^CHROMEOS_RELEASE_DESCRIPTION=.*" <<<"$lsb_file" | rev | cut -d " " -f 1,2 | rev)"
board=$board
board="${board% *}"
version="$(grep -o "^CHROMEOS_RELEASE_CHROME_MILESTONE=.*" <<<"$lsb_file")"
version="${version##*=}"
build="$(grep -o "^CHROMEOS_RELEASE_VERSION=.*" <<<"$lsb_file")"
build="${build##*=}"
echo "< Linux information"
hasorhasnot="$(vmc list)"
if [[ "$hasorhasnot" =~ "termina".* ]]; then
	linux_installed=1
else
	linux_installed=0
fi
text() {
	case "$1" in
	1) echo "Does the Android Subsystem (Android apps) run?"; func=android ;;
	2) echo "Is Linux container install option available?"; func=linux ;;
	3) echo "Does Linux container install?"; func=linux_install ;;
	4) echo "Does Linux terminal run?"; func=linux_run ;;
	5) echo "Is Bluetooth working?"; func=bluetooth ;;
	6) echo "Is WiFi working?"; func=wifi ;;
	7) echo "Is the camera working?"; func=camera ;;
	8) echo "Is microphone working?"; func=microphone ;;
	9) echo "Does the touchscreen work?"; func=touchscreen ;;
	10) echo "Does trackpad and gestures work?"; func=trackpad;;
	esac
}
echo "===> Question time!"
echo ''
echo -e "Answer \e[0;32m1\e[0m or \e[0;32myes\e[0m if YES"
echo -e "Answer \e[0;31m0\e[0m or \e[0;31mno\e[0m if NO"
echo -e "Press Enter if you don't have the hardware from the question"
echo ''
ques=0
while [[ "$ques" != 10 ]]; do
	((ques++))
	case "$ques" in 2|3)
		if [ "$linux_installed" == 1 ]; then
		linux=Yes
		linux_install=Yes
		[ "$ques" == 2 ] && continue 2 || continue
		fi
	esac
	text "$ques"
	eval 'read -rp ">>> " '$func''
	if (( "$ques" < 5 )) && [[ -z "$(eval 'echo $'$func'')" ]]; then
		echo "Invalid answer"
		exit 3
	fi
	eval 'case "$'$func'" in 1|*es) '$func'=Yes ;; 0|*o) '$func'=No ;; "") : ;; *) echo "Invalid answer"; exit 3 ;; esac'
done
echo ''
echo -e "Which of the options is \e[1;33mbest\e[0m suited for the model of your device?"
echo -e "Enter the \e[0;36mnumber\e[0m of the option, or, if none of the above is suitable, enter the model \e[0;36min your own way\e[0m"
echo ''
echo "1. $model1"
echo "2. $model2"
echo "3. $model3"
read -rp ">>> " modelnumber
case "$modelnumber" in
	1) model="$model1" ;;
	2) model="$model2" ;;
	3) model="$model3" ;;
	"") echo "Invalid answer"; exit 3; ;;
	*) model="$modelnumber" ;;
esac
ques=0
clear
echo "------------------------------"
echo "$model"
echo "CPU: $cpu"
echo "RAM: $ram"
echo "Storage: $storage"
echo "Brunch: $brunch"
echo "Recovery: $board $version (build $build)"
for func in android linux linux_install linux_run bluetooth wifi camera microphone touchscreen trackpad; do
	((ques++))
	eval 'if [ -z "$'$func'" ]; then :; else echo -n '-'; text $ques; echo -e " \e[1m[$'$func']\e[0m"; fi'
done
